{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CS153 - Design of Operating System - Lab Session - 25 Winter Basic Info Hi\ud83d\udc4b, welcome to the course page for CS153 Design of Operating System, Winter 2025 for UC Riverside, whose lecture is hosted by Prof. Heng Yin . The laboratory section would be hosted by me, Zhaoqi Xiao. There will be 3 lab assignments for this course starting from lab 1. You need to submit a short report on eLearn and a git commit on github classroom. Late Policy No slack days We will use the eLearn submission timestamp to determine the days. Please note that deadlines are end of day (11:59:59pm). If you're a few minutes late, the submission will not be considered as late. 10% penalty for every late day and the maximum penalty is 50%, so submitting is always better than not submitting. Lab Participation There will be 2 lab session per week, while you only need to take one which is more convenient to you. We will track the attendance in the first lab session after a new assignment is released (e.g., the lab in the next week, in which we will release lab 1). The left Q/A labs will not have attendance taken. You are free to come if you need help on your lab assignment. Index for Labs Lab 0 (Not counted for score)","title":"CS153 - Design of Operating System - Lab Session - 25 Winter"},{"location":"#cs153-design-of-operating-system-lab-session-25-winter","text":"","title":"CS153 - Design of Operating System - Lab Session - 25 Winter"},{"location":"#basic-info","text":"Hi\ud83d\udc4b, welcome to the course page for CS153 Design of Operating System, Winter 2025 for UC Riverside, whose lecture is hosted by Prof. Heng Yin . The laboratory section would be hosted by me, Zhaoqi Xiao. There will be 3 lab assignments for this course starting from lab 1. You need to submit a short report on eLearn and a git commit on github classroom.","title":"Basic Info"},{"location":"#late-policy","text":"No slack days We will use the eLearn submission timestamp to determine the days. Please note that deadlines are end of day (11:59:59pm). If you're a few minutes late, the submission will not be considered as late. 10% penalty for every late day and the maximum penalty is 50%, so submitting is always better than not submitting.","title":"Late Policy"},{"location":"#lab-participation","text":"There will be 2 lab session per week, while you only need to take one which is more convenient to you. We will track the attendance in the first lab session after a new assignment is released (e.g., the lab in the next week, in which we will release lab 1). The left Q/A labs will not have attendance taken. You are free to come if you need help on your lab assignment.","title":"Lab Participation"},{"location":"#index-for-labs","text":"Lab 0 (Not counted for score)","title":"Index for Labs"},{"location":"lab-instructions/lab0/","text":"Lab 0 Instructions Before you start You don't need to submit ANYTHING for this lab. This is a demo for you to get familiar to the github classroom. Try this step-by-step demo and push your work to see whether you can achieve full score! Join in our Github Classroom Click the link: https://classroom.github.com/classrooms/193988062-ucr-cs153-25winter Join in the classroom and link your github account to your SID. If your SID DOESN't appear in the list, contact me. Accept Lab 0 Accept Lab 0 thourgh the link: https://classroom.github.com/a/tgW8fvsX Required System A Unix-like system! It can be: 1. Any Linux distribution (e.g., Ubuntu) 2. macOS 3. Windows Subsystem Linux, WSL (Click here to see how to install!) Required Tools After you get your system set up, you should install some necessary tools for developing xv6. Run the following command in your command line (copy & paste the command just following the $ sign). Debian or Ubuntu $ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu Arch Linux $ sudo pacman -S riscv64-linux-gnu-binutils riscv64-linux-gnu-gcc riscv64-linux-gnu-gdb qemu-emulators-full macOS Install developer tools if you haven't: $ xcode-select --install Next, install Homebrew , a package manager for macOS if you haven't: $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Next, install the RISC-V compiler toolchain : $ brew tap riscv/riscv $ brew install riscv-tools The brew formula may not link into /usr/local. You will need to update your shell's rc file (e.g. ~/.bashrc ) to add the appropriate directory to $PATH . Finally install QEMU: $ brew install qemu Test your tools Run the following command to see whether it can give you the version number for the programs: $ qemu-system-riscv64 --version QEMU emulator version 8.2.2 (Debian 1:8.2.2+ds-0ubuntu1.2) ... And at least one RISC-V version of GCC: $ riscv64-linux-gnu-gcc --version riscv64-linux-gnu-gcc (Ubuntu 13.2.0-23ubuntu4) 13.2.0 ... $ riscv64-unknown-elf-gcc --version $ riscv64-unknown-linux-gnu-gcc --version Compile Get into the directory with your lab0 code. $ cd /some/path/to/xv6-riscv-lab0 Build and run xv6 $ make qemu riscv64-linux-gnu-gcc -c -o kernel/entry.o kernel/entry.S riscv64-linux-gnu-gcc -Wall -Werror -O -fno-omit-frame-pointer -ggdb ... riscv64-linux-gnu-objdump -S user/_zombie > user/zombie.asm riscv64-linux-gnu-objdump -t user/_zombie | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$/d' > user/zombie.sym mkfs/mkfs fs.img README user/_cat user/_echo user/_forktest user/_grep user/_init user/_kill user/_ln user/_ls user/_mkdir user/_rm user/_sh user/_stressfs user/_usertests user/_grind user/_wc user/_zombie nmeta 46 (boot, super, log blocks 30 inode blocks 13, bitmap blocks 1) blocks 1954 total 2000 balloc: first 767 blocks have been allocated balloc: write bitmap block at sector 45 qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -global virtio-mmio.force-legacy=false -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 xv6 kernel is booting hart 2 starting hart 1 starting init: starting sh Now, xv6-riscv has been compiled and a bash is running. If you type ls at the prompt, you should see output similar to the following: $ ls . 1 1 1024 .. 1 1 1024 README 2 2 2292 cat 2 3 34264 echo 2 4 33184 forktest 2 5 16184 grep 2 6 37520 init 2 7 33648 kill 2 8 33104 ln 2 9 32920 ls 2 10 36288 mkdir 2 11 33160 rm 2 12 33152 sh 2 13 54728 stressfs 2 14 34048 usertests 2 15 179352 grind 2 16 49400 wc 2 17 35216 zombie 2 18 32528 console 3 19 0 There are the files that mkfs includes in the initial file system; most are programs you can run. To quit qemu type Ctrl-a x (press Ctrl and a at the same time, followed by x ) Add the First User Program! Open this directory using any code editor (e.g., vscode). In the directory /user , add a file named by hello-world.c . Copy and paste the following code to the file. Remember to save it. #include \"user/user.h\" int main() { printf(\"hello, world\\n\"); } Add one line in the file /Makefile , just after line 141 and save. ... $U/_grind\\ $U/_wc\\ $U/_zombie\\ $U/_hello-world\\ Now recompile the code using make qemu . After you see init: starting sh . You can type ls to check whether there is a new program naming hello-world . If there is, type command hello-world to run this program. $ hello-world hello, world You are done with your work here! Basic Linux Commands cd [SOMEWHERE] : change directory to SOMEWHERE. cd / will change directory to root directoty. cd .. will change to the upper level directory. cd dir1 will change to dir1 under currect directory. ls or ls [SOMEWHERE] : ls is the same as ls . , which means list the items in currect directory. You can use a parameter to specify which directory you want to list. Basic Git Commands git clone [URL] : clone a repository to currect position. git add [FILES] : add some files for tracking. git commit -c \"CMNT HERE\" : commit the changes and append some comment. git push : push the commit(s) to the remote repository. Git related Questions How can I clone a private repository to my local machine? https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository What if there is a permission error when I try cloning a repository? https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account","title":"Lab 0 Instructions"},{"location":"lab-instructions/lab0/#lab-0-instructions","text":"","title":"Lab 0 Instructions"},{"location":"lab-instructions/lab0/#before-you-start","text":"You don't need to submit ANYTHING for this lab. This is a demo for you to get familiar to the github classroom. Try this step-by-step demo and push your work to see whether you can achieve full score!","title":"Before you start"},{"location":"lab-instructions/lab0/#join-in-our-github-classroom","text":"Click the link: https://classroom.github.com/classrooms/193988062-ucr-cs153-25winter Join in the classroom and link your github account to your SID. If your SID DOESN't appear in the list, contact me.","title":"Join in our Github Classroom"},{"location":"lab-instructions/lab0/#accept-lab-0","text":"Accept Lab 0 thourgh the link: https://classroom.github.com/a/tgW8fvsX","title":"Accept Lab 0"},{"location":"lab-instructions/lab0/#required-system","text":"A Unix-like system! It can be: 1. Any Linux distribution (e.g., Ubuntu) 2. macOS 3. Windows Subsystem Linux, WSL (Click here to see how to install!)","title":"Required System"},{"location":"lab-instructions/lab0/#required-tools","text":"After you get your system set up, you should install some necessary tools for developing xv6. Run the following command in your command line (copy & paste the command just following the $ sign).","title":"Required Tools"},{"location":"lab-instructions/lab0/#debian-or-ubuntu","text":"$ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu","title":"Debian or Ubuntu"},{"location":"lab-instructions/lab0/#arch-linux","text":"$ sudo pacman -S riscv64-linux-gnu-binutils riscv64-linux-gnu-gcc riscv64-linux-gnu-gdb qemu-emulators-full","title":"Arch Linux"},{"location":"lab-instructions/lab0/#macos","text":"Install developer tools if you haven't: $ xcode-select --install Next, install Homebrew , a package manager for macOS if you haven't: $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Next, install the RISC-V compiler toolchain : $ brew tap riscv/riscv $ brew install riscv-tools The brew formula may not link into /usr/local. You will need to update your shell's rc file (e.g. ~/.bashrc ) to add the appropriate directory to $PATH . Finally install QEMU: $ brew install qemu","title":"macOS"},{"location":"lab-instructions/lab0/#test-your-tools","text":"Run the following command to see whether it can give you the version number for the programs: $ qemu-system-riscv64 --version QEMU emulator version 8.2.2 (Debian 1:8.2.2+ds-0ubuntu1.2) ... And at least one RISC-V version of GCC: $ riscv64-linux-gnu-gcc --version riscv64-linux-gnu-gcc (Ubuntu 13.2.0-23ubuntu4) 13.2.0 ... $ riscv64-unknown-elf-gcc --version $ riscv64-unknown-linux-gnu-gcc --version","title":"Test your tools"},{"location":"lab-instructions/lab0/#compile","text":"Get into the directory with your lab0 code. $ cd /some/path/to/xv6-riscv-lab0 Build and run xv6 $ make qemu riscv64-linux-gnu-gcc -c -o kernel/entry.o kernel/entry.S riscv64-linux-gnu-gcc -Wall -Werror -O -fno-omit-frame-pointer -ggdb ... riscv64-linux-gnu-objdump -S user/_zombie > user/zombie.asm riscv64-linux-gnu-objdump -t user/_zombie | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$/d' > user/zombie.sym mkfs/mkfs fs.img README user/_cat user/_echo user/_forktest user/_grep user/_init user/_kill user/_ln user/_ls user/_mkdir user/_rm user/_sh user/_stressfs user/_usertests user/_grind user/_wc user/_zombie nmeta 46 (boot, super, log blocks 30 inode blocks 13, bitmap blocks 1) blocks 1954 total 2000 balloc: first 767 blocks have been allocated balloc: write bitmap block at sector 45 qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -global virtio-mmio.force-legacy=false -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 xv6 kernel is booting hart 2 starting hart 1 starting init: starting sh Now, xv6-riscv has been compiled and a bash is running. If you type ls at the prompt, you should see output similar to the following: $ ls . 1 1 1024 .. 1 1 1024 README 2 2 2292 cat 2 3 34264 echo 2 4 33184 forktest 2 5 16184 grep 2 6 37520 init 2 7 33648 kill 2 8 33104 ln 2 9 32920 ls 2 10 36288 mkdir 2 11 33160 rm 2 12 33152 sh 2 13 54728 stressfs 2 14 34048 usertests 2 15 179352 grind 2 16 49400 wc 2 17 35216 zombie 2 18 32528 console 3 19 0 There are the files that mkfs includes in the initial file system; most are programs you can run. To quit qemu type Ctrl-a x (press Ctrl and a at the same time, followed by x )","title":"Compile"},{"location":"lab-instructions/lab0/#add-the-first-user-program","text":"Open this directory using any code editor (e.g., vscode). In the directory /user , add a file named by hello-world.c . Copy and paste the following code to the file. Remember to save it. #include \"user/user.h\" int main() { printf(\"hello, world\\n\"); } Add one line in the file /Makefile , just after line 141 and save. ... $U/_grind\\ $U/_wc\\ $U/_zombie\\ $U/_hello-world\\ Now recompile the code using make qemu . After you see init: starting sh . You can type ls to check whether there is a new program naming hello-world . If there is, type command hello-world to run this program. $ hello-world hello, world You are done with your work here!","title":"Add the First User Program!"},{"location":"lab-instructions/lab0/#basic-linux-commands","text":"cd [SOMEWHERE] : change directory to SOMEWHERE. cd / will change directory to root directoty. cd .. will change to the upper level directory. cd dir1 will change to dir1 under currect directory. ls or ls [SOMEWHERE] : ls is the same as ls . , which means list the items in currect directory. You can use a parameter to specify which directory you want to list.","title":"Basic Linux Commands"},{"location":"lab-instructions/lab0/#basic-git-commands","text":"git clone [URL] : clone a repository to currect position. git add [FILES] : add some files for tracking. git commit -c \"CMNT HERE\" : commit the changes and append some comment. git push : push the commit(s) to the remote repository.","title":"Basic Git Commands"},{"location":"lab-instructions/lab0/#git-related-questions","text":"","title":"Git related Questions"},{"location":"lab-instructions/lab0/#how-can-i-clone-a-private-repository-to-my-local-machine","text":"https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository","title":"How can I clone a private repository to my local machine?"},{"location":"lab-instructions/lab0/#what-if-there-is-a-permission-error-when-i-try-cloning-a-repository","text":"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account","title":"What if there is a permission error when I try cloning a repository?"}]}