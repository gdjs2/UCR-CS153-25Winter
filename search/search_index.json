{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CS153 - Design of Operating System - Lab Session - 25 Winter Basic Info Hi\ud83d\udc4b, welcome to the course page for CS153 Design of Operating System, Winter 2025 for UC Riverside, whose lecture is hosted by Prof. Heng Yin . The laboratory section would be hosted by me, Zhaoqi Xiao. There will be 3 lab assignments for this course starting from lab 1. You need to submit a short report on eLearn and a git commit on github classroom. Late Policy No slack days We will use the eLearn submission timestamp to determine the days. Please note that deadlines are end of day (11:59:59pm). If you're a few minutes late, the submission will not be considered as late. 10% penalty for every late day and the maximum penalty is 50%, so submitting is always better than not submitting. Lab Participation There will be 2 lab session per week, while you only need to take one which is more convenient to you. We will track the attendance in the first lab session after a new assignment is released (e.g., the lab in the next week, in which we will release lab 1). The left Q/A labs will not have attendance taken. You are free to come if you need help on your lab assignment. Index for Labs Lab 0 (Not counted for score)","title":"CS153 - Design of Operating System - Lab Session - 25 Winter"},{"location":"#cs153-design-of-operating-system-lab-session-25-winter","text":"","title":"CS153 - Design of Operating System - Lab Session - 25 Winter"},{"location":"#basic-info","text":"Hi\ud83d\udc4b, welcome to the course page for CS153 Design of Operating System, Winter 2025 for UC Riverside, whose lecture is hosted by Prof. Heng Yin . The laboratory section would be hosted by me, Zhaoqi Xiao. There will be 3 lab assignments for this course starting from lab 1. You need to submit a short report on eLearn and a git commit on github classroom.","title":"Basic Info"},{"location":"#late-policy","text":"No slack days We will use the eLearn submission timestamp to determine the days. Please note that deadlines are end of day (11:59:59pm). If you're a few minutes late, the submission will not be considered as late. 10% penalty for every late day and the maximum penalty is 50%, so submitting is always better than not submitting.","title":"Late Policy"},{"location":"#lab-participation","text":"There will be 2 lab session per week, while you only need to take one which is more convenient to you. We will track the attendance in the first lab session after a new assignment is released (e.g., the lab in the next week, in which we will release lab 1). The left Q/A labs will not have attendance taken. You are free to come if you need help on your lab assignment.","title":"Lab Participation"},{"location":"#index-for-labs","text":"Lab 0 (Not counted for score)","title":"Index for Labs"},{"location":"lab-instructions/lab0/","text":"Lab 0 Instructions Before you start You don't need to submit ANYTHING for this lab. This is a demo for you to get familiar to the github classroom. Try this step-by-step demo and push your work to see whether you can achieve full score! Required System A Unix-like system! It can be: 1. Any Linux distribution (e.g., Ubuntu) 2. macOS 3. Windows Subsystem Linux, WSL (Click here to see how to install!) Required Tools After you get your system set up, you should install some necessary tools for developing xv6. Run the following command in your command line (copy & paste the command just following the $ sign). Debian or Ubuntu $ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu Arch Linux $ sudo pacman -S riscv64-linux-gnu-binutils riscv64-linux-gnu-gcc riscv64-linux-gnu-gdb qemu-emulators-full macOS Install developer tools if you haven't: $ xcode-select --install Next, install Homebrew , a package manager for macOS if you haven't: $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Next, install the RISC-V compiler toolchain : $ brew tap riscv/riscv $ brew install riscv-tools The brew formula may not link into /usr/local. You will need to update your shell's rc file (e.g. ~/.bashrc ) to add the appropriate directory to $PATH . Finally install QEMU: $ brew install qemu Test your tools Run the following command to see whether it can give you the version number for the programs: $ qemu-system-riscv64 --version QEMU emulator version 8.2.2 (Debian 1:8.2.2+ds-0ubuntu1.2) ... And at least one RISC-V version of GCC: $ riscv64-linux-gnu-gcc --version riscv64-linux-gnu-gcc (Ubuntu 13.2.0-23ubuntu4) 13.2.0 ... $ riscv64-unknown-elf-gcc --version $ riscv64-unknown-linux-gnu-gcc --version","title":"Lab 0 Instructions"},{"location":"lab-instructions/lab0/#lab-0-instructions","text":"","title":"Lab 0 Instructions"},{"location":"lab-instructions/lab0/#before-you-start","text":"You don't need to submit ANYTHING for this lab. This is a demo for you to get familiar to the github classroom. Try this step-by-step demo and push your work to see whether you can achieve full score!","title":"Before you start"},{"location":"lab-instructions/lab0/#required-system","text":"A Unix-like system! It can be: 1. Any Linux distribution (e.g., Ubuntu) 2. macOS 3. Windows Subsystem Linux, WSL (Click here to see how to install!)","title":"Required System"},{"location":"lab-instructions/lab0/#required-tools","text":"After you get your system set up, you should install some necessary tools for developing xv6. Run the following command in your command line (copy & paste the command just following the $ sign).","title":"Required Tools"},{"location":"lab-instructions/lab0/#debian-or-ubuntu","text":"$ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu","title":"Debian or Ubuntu"},{"location":"lab-instructions/lab0/#arch-linux","text":"$ sudo pacman -S riscv64-linux-gnu-binutils riscv64-linux-gnu-gcc riscv64-linux-gnu-gdb qemu-emulators-full","title":"Arch Linux"},{"location":"lab-instructions/lab0/#macos","text":"Install developer tools if you haven't: $ xcode-select --install Next, install Homebrew , a package manager for macOS if you haven't: $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Next, install the RISC-V compiler toolchain : $ brew tap riscv/riscv $ brew install riscv-tools The brew formula may not link into /usr/local. You will need to update your shell's rc file (e.g. ~/.bashrc ) to add the appropriate directory to $PATH . Finally install QEMU: $ brew install qemu","title":"macOS"},{"location":"lab-instructions/lab0/#test-your-tools","text":"Run the following command to see whether it can give you the version number for the programs: $ qemu-system-riscv64 --version QEMU emulator version 8.2.2 (Debian 1:8.2.2+ds-0ubuntu1.2) ... And at least one RISC-V version of GCC: $ riscv64-linux-gnu-gcc --version riscv64-linux-gnu-gcc (Ubuntu 13.2.0-23ubuntu4) 13.2.0 ... $ riscv64-unknown-elf-gcc --version $ riscv64-unknown-linux-gnu-gcc --version","title":"Test your tools"}]}